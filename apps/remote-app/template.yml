AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Proyecto SAM con AWS Step Functions y Lambdas en Node.js 20.x con TypeScript
Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 10
    Architectures:
      - x86_64

Resources:
  # Función Lambda para validar la sesión
  ValidateSessionFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
    Properties:
      Handler: index.handler
      CodeUri: src/validate-session/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ApiPOSTexecution:
          Type: Api
          Properties:
            Path: /execution
            Method: POST
            RestApiId: !Ref Api
  OperationsQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      QueueName: scarlet-operations-queue
  ExecutionQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      QueueName: scarlet-executions-queue
      # UploadedFilesBucket:
      #   Type: AWS::S3::Bucket
      #   Properties:
      #        Bucket: scarlet-files-bucket
      #  PolicyDocument:

      # Función Lambda para el mapeo (scarlet mapping)
  ScarletMappingFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
    Properties:
      Handler: index.handler
      CodeUri: src/scarlet-mapping/
      Policies:
        - AWSLambdaBasicExecutionRole
  # Función Lambda para el mapeo (scarlet mapping)
  GetExistingIssuesFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
    Properties:
      Handler: index.handler
      CodeUri: src/get-existing-issues/
      Policies:
        - AWSLambdaBasicExecutionRole

  # Función Lambda para agregar la orden
  SaveStorage:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
    Properties:
      Handler: index.handler
      CodeUri: src/save-storage/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ApiGETexecutionid:
          Type: Api
          Properties:
            Path: /execution/{id}
            Method: GET
            RestApiId: !Ref Api
  ExecutionPipe:
    Type: AWS::Pipes::Pipe
    DependsOn: []
    Properties:
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      Name: scarlet-execution-pipe
      DesiredState: RUNNING
      Source: !GetAtt ExecutionQueue.Arn
        # Fn::Sub: >-
        #   arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:scheme-execution-queue
      SourceParameters:
        SqsQueueParameters:
          BatchSize: 1
      TargetParameters:
        StepFunctionStateMachineParameters:
          InvocationType: FIRE_AND_FORGET
      Target: !GetAtt StateMachine.Arn
  # Máquina de estado (Step Functions) definida en un archivo JSON externo
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        ValidateSessionFunction: !GetAtt ValidateSessionFunction.Arn
        ScarletMappingFunction: !GetAtt ScarletMappingFunction.Arn
        GetExistingIssuesFunction: !GetAtt GetExistingIssuesFunction.Arn
        SaveStorage: !GetAtt SaveStorage.Arn
        OperationsQueue: !GetAtt OperationsQueue.Arn
        AddOrderFunction: !Ref AWS::NoValue
      Role: !GetAtt StateMachineExecutionRole.Arn
      Name: scarlet-execution-machine
      DefinitionUri: statemachine.json

  # Rol de ejecución para la máquina de estado
  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
                - pipes.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - states:StartExecution
                Resource: '*'
  ValidateSessionFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt ValidateSessionFunction.Arn
      AuthType: AWS_IAM
  GetUploadUrl:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetUploadUrl
      CodeUri: src/get-upload-url
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETgetuploadurl:
          Type: Api
          Properties:
            Path: /get-upload-url
            Method: GET
            RestApiId: !Ref Api
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Format: esm
        Target: "node20"
        Minify: true
  GetUploadUrlLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetUploadUrl}
  DownloadTemplate:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: DownloadTemplate
      CodeUri: src/download-template
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETdownloadtemplate:
          Type: Api
          Properties:
            Path: /download-template
            Method: GET
            RestApiId: !Ref Api
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: true
  DownloadTemplateLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${DownloadTemplate}
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /download-template:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DownloadTemplate.Arn}/invocations
              responses: {}
              cors: true
          /get-upload-url:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUploadUrl.Arn}/invocations
              responses: {}
              cors: true
          /execution/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveStorage.Arn}/invocations
              responses: {}
              cors: true
          /execution:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ValidateSessionFunction.Arn}/invocations
              responses: {}
              cors: true
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Origin,Accept,Referer'"
        AllowOrigin: "'https://*.atlassian-dev.net,https://*.atl-paas.net,https://*.atlassian.net'"
        MaxAge: 1000
        AllowCredentials: true
  ScarletStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-storage-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ScarletStorageBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt ScarletStorageBucket.Arn
              - !Sub ${ScarletStorageBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'

Outputs:
  ExecutionTriggerUrl:
    Description: Scarlet Execution Trigger Url
    Value: !GetAtt ValidateSessionFunctionUrl.FunctionUrl
  ApiUrl:
    Description: Scarlet Api Remote Url
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod