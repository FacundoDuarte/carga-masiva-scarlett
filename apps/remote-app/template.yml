Transform: AWS::Serverless-2016-10-31
Description: |
  Proyecto SAM con AWS Step Functions y Lambdas en Node.js 20.x con TypeScript
Globals:
  Function:
    Runtime: provided.al2
    Timeout: 30
    Architectures:
      - arm64
    Layers:
      - !Ref UtilsLayer
      - arn:aws:lambda:us-east-1:529202746267:layer:bun:1
  Api:
    OpenApiVersion: 3.0.1
Resources:
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-utils
      Description: Layer containing utils package
      ContentUri: ../../packages/utils/utils-layer.zip
      CompatibleRuntimes:
        - provided.al2
      RetentionPolicy: Retain
  ScarletExecutionQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      QueueName: !Sub ${AWS::StackName}-execution-queue
      VisibilityTimeout: 900 # 15 minutos para procesar mensajes
      MessageRetentionPeriod: 1209600 # 14 días
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ScarletExecutionDLQ.Arn
        maxReceiveCount: 3
  SQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt ScarletExecutionQueue.Arn
      FunctionName: !Ref ExecuteOperationFunction
  ScarletExecutionDLQ:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      QueueName: !Sub ${AWS::StackName}-execution-dlq
      MessageRetentionPeriod: 1209600 # 14 días
  ScarletStorageBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-storage
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldFiles
            Status: Enabled
            ExpirationInDays: 30
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Scarlett API
          version: "1.0"
        x-amazon-apigateway-binary-media-types:
          - multipart/form-data
        paths:
          /validate-session:
            post:
              security: [] # This explicitly makes the endpoint public (no auth required)
              x-amazon-apigateway-integration:
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ValidateSessionFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
                contentHandling: CONVERT_TO_TEXT
              responses:
                "200":
                  description: Success
              x-amazon-apigateway-cors:
                allowOrigin: "*"
                allowMethods:
                  - POST
                  - OPTIONS
                allowHeaders:
                  - Content-Type
                  - Authorization
                  - X-Amz-Date
                  - X-Api-Key
                  - X-Amz-Security-Token
                maxAge: 300
          /execution:
            post:
              security: [] # This explicitly makes the endpoint public (no auth required)
              x-amazon-apigateway-integration:
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ValidateSessionFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses:
                "200":
                  description: Success
              x-amazon-apigateway-cors:
                allowOrigin: "*"
                allowMethods:
                  - POST
                  - OPTIONS
                allowHeaders:
                  - Content-Type
                  - Authorization
                  - X-Amz-Date
                  - X-Api-Key
                  - X-Amz-Security-Token
                maxAge: 300
          /get-upload-url:
            post:
              security: [] # This explicitly makes the endpoint public (no auth required)
              x-amazon-apigateway-integration:
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUploadUrl.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses:
                "200":
                  description: Success
              x-amazon-apigateway-cors:
                allowOrigin: "*"
                allowMethods:
                  - POST
                  - OPTIONS
                allowHeaders:
                  - Content-Type
                  - Authorization
                  - X-Amz-Date
                  - X-Api-Key
                  - X-Amz-Security-Token
                maxAge: 300
          /download-template:
            get:
              security: [] # This explicitly makes the endpoint public (no auth required)
              x-amazon-apigateway-integration:
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DownloadTemplate.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: GET
                type: aws_proxy
              responses:
                "200":
                  description: Success
              x-amazon-apigateway-cors:
                allowOrigin: "*"
                allowMethods:
                  - GET
                  - OPTIONS
                allowHeaders:
                  - Content-Type
                  - Authorization
                  - X-Amz-Date
                  - X-Api-Key
                  - X-Amz-Security-Token
                maxAge: 300
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
  ValidateSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ValidateSession
      CodeUri: ./dist
      Handler: validate-session.default
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: !Sub arn:aws:s3:::${AWS::StackName}-storage/*
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: "*"
      Events:
        ApiPOSTvalidatesession:
          Type: Api
          Properties:
            Path: /validate-session
            Method: POST
            RestApiId: !Ref Api
    Metadata:
      BuildMethod: makefile
    Events:
      ApiPOSTvalidatesession:
        Type: Api
        Properties:
          Path: /validate-session
          Method: POST
          RestApiId: !Ref Api
  GetStateMachineStatus:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetStateMachineStatus
      CodeUri: ./dist
      Handler: get-statemachine-status.default
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - states:DescribeStateMachine
                - states:DescribeExecution
              Resource: '*'
      Events:
        ApiPOSTgetstatemachinestatus:
          Type: Api
          Properties:
            Path: /executions
            Method: POST
            RestApiId: !Ref Api
    Metadata:
      BuildMethod: makefile
  ExecuteOperationFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - execute-operation.mts
        Bundle: true
        Minify: true
        Format: esm
        Platform: node
        Target: esnext
        External:
          - "@aws-sdk/*"
          - aws-sdk
          - "@forge/api"
          - date-fns
          - jose
          - uuid
          - bun
        TreeShaking: true
        Sourcemap: false

    Properties:
      Handler: execute-operation.post
      CodeUri: ./src
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref ScarletStorageBucket
        - Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource:
                - !GetAtt ScarletExecutionQueue.Arn
      Timeout: 30
      Tracing: Active
  GetExistingIssuesFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - get-existing-issues.mts
        Bundle: true
        Minify: true
        Format: esm
        Platform: node
        Target: es2020
        External:
          - "@aws-sdk/*"
          - aws-sdk
          - "@forge/api"
          - date-fns
          - jose
          - uuid
          - bun
        TreeShaking: true
        Sourcemap: false
    Properties:
      Handler: get-existing-issues.post
      CodeUri: ./src
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref ScarletStorageBucket
  # Máquina de estado (Step Functions) definida en un archivo JSON externo
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        ExecuteOperationFunction: !GetAtt ExecuteOperationFunction.Arn
        GetExistingIssuesFunction: !GetAtt GetExistingIssuesFunction.Arn
        ScarletExecutionQueue: !Ref ScarletExecutionQueue
      Role: !GetAtt StateMachineExecutionRole.Arn
      Name: scarlet-execution-machine
      DefinitionUri: statemachine.json

  # Rol de ejecución para la máquina de estado
  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
                - pipes.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - states:StartExecution
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub ${ScarletStorageBucket.Arn}/*
  GetUploadUrl:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetUploadUrl
      Handler: get-upload-url.post
      CodeUri: ./src
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource:
                - !Sub ${ScarletStorageBucket.Arn}/*

      Events:
        ApiPOSTgetuploadurl:
          Type: Api
          Properties:
            Path: /get-upload-url
            Method: POST
            RestApiId: !Ref Api
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - get-upload-url.ts
        Bundle: true
        Minify: true
        Format: esm
        Platform: node
        Target: esnext
        External:
          - "@aws-sdk/*"
          - aws-sdk
          - "@forge/api"
          - date-fns
          - jose
          - uuid
          - bun
        TreeShaking: true
        Sourcemap: false
  GetUploadUrlLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetUploadUrl}
  DownloadTemplate:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: DownloadTemplate
      Handler: download-template.get
      CodeUri: ./src
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETdownloadtemplate:
          Type: Api
          Properties:
            Path: /download-template
            Method: GET
            RestApiId: !Ref Api
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - download-template.ts
        Bundle: true
        Minify: true
        Format: esm
        Platform: node
        Target: esnext
        External:
          - bun
        TreeShaking: true
        Sourcemap: false

Outputs:
  GetStateMachineStatusUrl:
    Description: Validate Session Function Url
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/execute
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/
