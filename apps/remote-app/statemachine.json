{
	"Comment": "Distributed map that reads CSV file for order data and detects delayed orders",
	"StartAt": "Operate Rows",
	"QueryLanguage": "JSONata",
	"States": {
		"Operate Rows": {
			"Type": "Map",
			"ItemProcessor": {
				"ProcessorConfig": {
					"Mode": "DISTRIBUTED",
					"ExecutionType": "EXPRESS"
				},
				"StartAt": "Lambda Invoke",
				"States": {
					"Lambda Invoke": {
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"OutputPath": "$.Payload",
						"Parameters": {
							"Payload.$": "$",
							"FunctionName": "${GetExistingIssuesFunction}"
						},
						"Retry": [
							{
								"ErrorEquals": [
									"Lambda.ServiceException",
									"Lambda.AWSLambdaException",
									"Lambda.SdkClientException",
									"Lambda.TooManyRequestsException"
								],
								"IntervalSeconds": 1,
								"MaxAttempts": 3,
								"BackoffRate": 2,
								"JitterStrategy": "FULL"
							}
						],
						"Next": "Choice"
					},
					"Choice": {
						"Type": "Choice",
						"Choices": [
							{
								"Variable": "$.Payload.method",
								"StringEquals": "OMIT",
								"Next": "Store Operation Result: Omitted"
							}
						],
						"Default": "ScarletMapping"
					},
					"Store Operation Result: Omitted": {
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"Output": "{% $states.result.Payload %}",
						"Arguments": {
							"FunctionName": "${AddOrderFunction}",
							"Payload": "$"
						},
						"Retry": [
							{
								"ErrorEquals": [
									"Lambda.ServiceException",
									"Lambda.AWSLambdaException",
									"Lambda.SdkClientException",
									"Lambda.TooManyRequestsException"
								],
								"IntervalSeconds": 1,
								"MaxAttempts": 3,
								"BackoffRate": 2,
								"JitterStrategy": "FULL"
							}
						],
						"End": true,
						"Parameters": {
							"FunctionName": "${AddOrderFunction}",
							"Payload": {
								"method": "OMIT",
								"issueKey": "$.issueKey"
							}
						}
					},
					"ScarletMapping": {
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"Output": "{% $states.result.Payload %}",
						"Arguments": {
							"FunctionName": "${ScarletMappingFunction}",
							"Payload": "$"
						},
						"Retry": [
							{
								"ErrorEquals": [
									"Lambda.ServiceException",
									"Lambda.AWSLambdaException",
									"Lambda.SdkClientException",
									"Lambda.TooManyRequestsException"
								],
								"IntervalSeconds": 1,
								"MaxAttempts": 3,
								"BackoffRate": 2,
								"JitterStrategy": "FULL"
							}
						],
						"Next": "SendDelayedOrder",
						"Parameters": {
							"FunctionName": "${ScarletMappingFunction}",
							"Payload.$": "$"
						}
					},
					"SendDelayedOrder": {
						"Type": "Task",
						"Resource": "arn:aws:states:::sqs:sendMessage",
						"Arguments": {
							"QueueUrl": "https://sqs.us-east-1.amazonaws.com/529202746267/scarlet-operations-queue",
							"MessageBody": "$"
						},
						"Output": "$",
						"End": true,
						"Parameters": {
							"QueueUrl": "${OperationsQueue}",
							"MessageBody.$": "$"
						}
					}
				}
			},
			"ItemReader": {
				"Resource": "arn:aws:states:::s3:getObject",
				"ReaderConfig": {
					"InputType": "CSV",
					"CSVHeaderLocation": "FIRST_ROW"
				},
				"Arguments": {
					"Bucket": "scarlet-meli-dev",
					"Key": "$.fileId"
				},
				"Parameters": {
					"Bucket.$": "$.bucketName",
					"Key.$": "$.filePath"
				}
			},
			"MaxConcurrency": 1000,
			"Label": "OperateRows",
			"End": true,
			"ItemBatcher": {
				"MaxItemsPerBatch": 10
			},
			"ResultWriter": {
				"Resource": "arn:aws:states:::s3:putObject",
				"Arguments": {
					"Bucket": "scarlet-meli-dev",
					"Prefix": "executions"
				},
				"WriterConfig": {
					"OutputType": "JSON",
					"Transformation": "NONE"
				},
				"Parameters": {
					"Bucket": "scarlet-meli-dev",
					"Prefix": "uploads"
				}
			},
			"ResultPath": "$.stateInput.method"
		}
	}
}