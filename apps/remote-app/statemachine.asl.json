{
    "Comment": "Distributed map that reads CSV file for order data and detects delayed orders",
    "StartAt": "Operate Rows",
    "States": {
        "Operate Rows": {
            "Type": "Map",
            "ResultPath": "$.mapResults",
            "Next": "CalculateResultSummary",
            "ItemProcessor": {
                "ProcessorConfig": {
                    "Mode": "DISTRIBUTED",
                    "ExecutionType": "EXPRESS"
                },
                "StartAt": "ParsingRows",
                "States": {
                    "ParsingRows": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${ParsingRowsFunction}",
                            "Payload.$": "$"
                        },
                        "OutputPath": "$.Payload",
                        "Catch": [
                            {
                                "ErrorEquals": [
                                    "States.ALL"
                                ],
                                "ResultPath": "$.error",
                                "Next": "EndWithError"
                            }
                        ],
                        "Next": "MatchExistingIssues"
                    },
                    "MatchExistingIssues": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${MatchExistingIssuesFunction}",
                            "Payload.$": "$"
                        },
                        "OutputPath": "$.Payload",
                        "Catch": [
                            {
                                "ErrorEquals": [
                                    "Lambda.TooManyRequestsException",
                                    "Lambda.ServiceUnavailable",
                                    "Lambda.Unknown",
                                    "States.Timeout"
                                ],
                                "ResultPath": null,
                                "Next": "WaitForRateLimitMatching"
                            },
                            {
                                "ErrorEquals": [
                                    "States.ALL"
                                ],
                                "ResultPath": "$.error",
                                "Next": "EndWithError"
                            }
                        ],
                        "Next": "ValidateCondition",
                        "TimeoutSeconds": 30
                    },
                    "ValidateCondition": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${ValidateConditionFunction}",
                            "Payload.$": "$"
                        },
                        "OutputPath": "$.Payload",
                        "Catch": [
                            {
                                "ErrorEquals": [
                                    "Lambda.TooManyRequestsException",
                                    "Lambda.ServiceUnavailable",
                                    "Lambda.Unknown",
                                    "States.Timeout"
                                ],
                                "ResultPath": null,
                                "Next": "WaitForRateLimitValidation"
                            },
                            {
                                "ErrorEquals": [
                                    "States.ALL"
                                ],
                                "ResultPath": "$.error",
                                "Next": "EndWithError"
                            }
                        ],
                        "Next": "Choice",
                        "TimeoutSeconds": 30
                    },
                    "Choice": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "And": [
                                    {
                                        "Variable": "$.Items",
                                        "IsPresent": true
                                    },
                                    {
                                        "Variable": "$.Items[0]",
                                        "IsPresent": true
                                    }
                                ],
                                "Next": "Execute Operations"
                            }
                        ],
                        "Default": "Success With No Items"
                    },
                    "Success With No Items": {
                        "Type": "Succeed"
                    },
                    "WaitForRateLimitMatching": {
                        "Type": "Wait",
                        "Next": "MatchExistingIssues",
                        "Seconds": 10
                    },
                    "WaitForRateLimitValidation": {
                        "Type": "Wait",
                        "Next": "ValidateCondition",
                        "Seconds": 10
                    },
                    "EndWithError": {
                        "Type": "Fail",
                        "Error": "Lambda.Unknown",
                        "Cause": "Error durante la ejecuci√≥n"
                    },
                    "Execute Operations": {
                        "Type": "Map",
                        "ItemsPath": "$.Items",
                        "ItemProcessor": {
                            "ProcessorConfig": {
                                "Mode": "INLINE"
                            },
                            "StartAt": "Execute",
                            "States": {
                                "Execute": {
                                    "Type": "Task",
                                    "Resource": "arn:aws:states:::lambda:invoke",
                                    "OutputPath": "$.Payload",
                                    "Parameters": {
                                        "FunctionName": "${ExecuteOperationFunction}",
                                        "Payload.$": "$"
                                    },
                                    "Catch": [
                                        {
                                            "ErrorEquals": [
                                                "Lambda.TooManyRequestsException",
                                                "Lambda.ServiceUnavailable",
                                                "States.Timeout",
                                                "Lambda.Unknown",
                                                "Error"
                                            ],
                                            "ResultPath": null,
                                            "Next": "WaitForItemRateLimit"
                                        },
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "ResultPath": "$.error",
                                            "Next": "Fail"
                                        }
                                    ],
                                    "Next": "Success",
                                    "TimeoutSeconds": 30
                                },
                                "Success": {
                                    "Type": "Succeed"
                                },
                                "WaitForItemRateLimit": {
                                    "Type": "Wait",
                                    "Next": "Execute",
                                    "Seconds": 10
                                },
                                "Fail": {
                                    "Type": "Fail"
                                }
                            }
                        },
                        "End": true
                    }
                }
            },
            "ItemReader": {
                "Resource": "arn:aws:states:::s3:getObject",
                "Parameters": {
                    "Bucket.$": "$.bucketName",
                    "Key.$": "$.filePath"
                },
                "ReaderConfig": {
                    "InputType": "CSV",
                    "CSVHeaderLocation": "FIRST_ROW",
                    "CSVDelimiter": "SEMICOLON"
                }
            },
            "MaxConcurrency": 1000,
            "Label": "OperateRows",
            "ResultWriter": {
                "Resource": "arn:aws:states:::s3:putObject",
                "Parameters": {
                    "Bucket.$": "$.bucketName",
                    "Prefix.$": "States.Format('results/{}/detailed/', $.executionId)"
                }
            },
            "ItemBatcher": {
                "MaxItemsPerBatch": 10,
                "BatchInput": {
                    "apiBaseUrl.$": "$.apiBaseUrl",
                    "forgeToken.$": "$.forgeToken",
                    "bucketName.$": "$.bucketName",
                    "executionId.$": "$.executionId",
                    "projectId.$": "$.projectId"
                }
            }
        },
        "CalculateResultSummary": {
            "Type": "Pass",
            "Parameters": {
                "summary": {
                    "totalItems": 0,
                    "processedItems": 0,
                    "executionId.$": "$.executionId",
                    "detailedResultsLocation.$": "States.Format('Resultados detallados guardados en S3: {}/{}', $.mapResults.ResultWriterDetails.Bucket, $.mapResults.ResultWriterDetails.Key)"
                }
            },
            "End": true
        }
    }
}